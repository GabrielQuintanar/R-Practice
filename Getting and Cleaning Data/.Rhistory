fileRead <- read.csv(
paste(directoryC, files[x], sep = ""),
header = T, sep = ","
)
rowsTotal <- sum(complete.cases(fileRead))
rowsComplete[x] <- rowsTotal
}
nameFiles <- parseInteger(nameFiles, ".csv")
my_matrix <- cbind(nameFiles, rowsComplete)
colnames(my_matrix) <- c("id", "nobs")
my_matrix
}
parseInteger <- function(v, string) {
for (x in 1:length(v)) {
v[x] <- as.numeric(strsplit(v, string)[[x]])
}
v
}
debugSource('~/R Workin Directory/Program Assignment 1.R')
complete("specdata", 1)
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", c(2, 4, 8, 10, 12))
pollutantmean <- function(directory, pollutant, id = 1:332) {
directoryC <- paste(directory, "/", sep="")
files <- list.files(path = directoryC)
total = 0
noRows = 0
for (v in id) {
sum = 0
fileRead <- read.csv(
paste(directoryC, files[v], sep = "")
, header = T, sep = ",")
fileFiltered <- fileRead[
complete.cases(fileRead[pollutant]), ]
noRows = noRows + nrow(fileFiltered)
for (pol in 1:nrow(fileFiltered)) {
sum = sum + fileFiltered[pol, ][pollutant]
}
total <- total + sum
}
total <- total / noRows
}
complete <- function(directory, id = 1:332){
directoryC <- paste(directory, "/", sep = "")
files <- list.files(path = directoryC)
nameFiles <- files[id]
rowsComplete <- vector(mode = "list", length = length(id))
y = 1
for (x in id) {
fileRead <- read.csv(
paste(directoryC, files[x], sep = ""),
header = T, sep = ","
)
rowsTotal <- sum(complete.cases(fileRead))
rowsComplete[y] <- rowsTotal
y = y+1
}
nameFiles <- parseInteger(nameFiles, ".csv")
my_matrix <- cbind(nameFiles, rowsComplete)
colnames(my_matrix) <- c("id", "nobs")
my_matrix
}
parseInteger <- function(v, string) {
for (x in 1:length(v)) {
v[x] <- as.numeric(strsplit(v, string)[[x]])
}
v
}
debugSource('~/R Workin Directory/Program Assignment 1.R')
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 30:25)
?cor
?complete.cases
?na.exclude
source('~/R Workin Directory/Program Assignment 1.R')
?formatC
corr <- function(directory, treshold = 0) {
directoryC <- paste(directory, "/", sep = "")
framed <- getCompleteCases(directoryC)
idsT <- framed[framed["nobs"] > treshold, ]$id
dataLast <- numeric()
for (x in idsT) {
dataRaw <- read.csv(paste(directoryC,
formatC(x, width = 3, flag = "0"),
".csv", sep = ""))
framed2 <- dataRaw[complete.cases(dataRaw), ]
resultCor <- cor(framed2$sulfate, framed2$nitrate)
dataLast <- c(dataLast, resultCor)
}
dataLast
}
getCompleteCases <- function(fileDirectory, id = 1:332) {
summsData <- function(x) {
data <- read.csv(paste(fileDirectory,
formatC(x, width = 3, flag = "0"),
".csv", sep = ""))
sum(complete.cases(data))
}
nobs <- sapply(id, summsData)
return(data.frame(id, nobs))
}
cr <- corr("specdata", 150)
head(cr)
pollutantmean <- function(directory, pollutant, id = 1:332) {
directoryC <- paste(directory, "/", sep="")
files <- list.files(path = directoryC)
total = 0
noRows = 0
for (v in id) {
sum = 0
fileRead <- read.csv(
paste(directoryC, files[v], sep = "")
, header = T, sep = ",")
fileFiltered <- fileRead[
complete.cases(fileRead[pollutant]), ]
noRows = noRows + nrow(fileFiltered)
for (pol in 1:nrow(fileFiltered)) {
sum = sum + fileFiltered[pol, ][pollutant]
}
total <- total + sum
}
total <- total / noRows
}
complete <- function(directory, id = 1:332){
directoryC <- paste(directory, "/", sep = "")
files <- list.files(path = directoryC)
nameFiles <- files[id]
rowsComplete <- vector(mode = "list", length = length(id))
y = 1
for (x in id) {
fileRead <- read.csv(
paste(directoryC, files[x], sep = ""),
header = T, sep = ","
)
rowsTotal <- sum(complete.cases(fileRead))
rowsComplete[y] <- rowsTotal
y = y+1
}
nameFiles <- parseInteger(nameFiles, ".csv")
my_matrix <- cbind(nameFiles, rowsComplete)
colnames(my_matrix) <- c("id", "nobs")
my_matrix
}
parseInteger <- function(v, string) {
for (x in 1:length(v)) {
v[x] <- as.numeric(strsplit(v, string)[[x]])
}
v
}
corr <- function(directory, treshold = 0) {
directoryC <- paste(directory, "/", sep = "")
framed <- getCompleteCases(directoryC)
idsT <- framed[framed["nobs"] > treshold, ]$id
dataLast <- numeric()
for (x in idsT) {
dataRaw <- read.csv(paste(directoryC,
formatC(x, width = 3, flag = "0"),
".csv", sep = ""))
framed2 <- dataRaw[complete.cases(dataRaw), ]
resultCor <- cor(framed2$sulfate, framed2$nitrate)
dataLast <- c(dataLast, resultCor)
}
dataLast
}
getCompleteCases <- function(fileDirectory, id = 1:332) {
summsData <- function(x) {
data <- read.csv(paste(fileDirectory,
formatC(x, width = 3, flag = "0"),
".csv", sep = ""))
sum(complete.cases(data))
}
nobs <- sapply(id, summsData)
return(data.frame(id, nobs))
}
pollutantmean("specdata", "sulfate", 1:10)
p <- pollutantmean("specdata", "sulfate", 1:10)
p
p <- pollutantmean("specdata", "nitrate", 70:72)
p
p <- pollutantmean("specdata", "sulfate", 34)
p
p <- pollutantmean("specdata", "nitrate")
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
cc$nobs
cc[nobs]
cc["nobs"]
cc <- getCompleteCases("specdata", c(6, 10, 20, 34, 100, 200, 310))
source('~/R Workin Directory/Program Assignment 1.R')
View(cc)
complete2 <- function(directory, id = 1:332){
summsData <- function(x) {
data <- read.csv(paste(fileDirectory, "/",
formatC(x, width = 3, flag = "0"),
".csv", sep = ""))
sum(complete.cases(data))
}
nobs <- sapply(id, summsData)
return(data.frame(id, nobs))
}
cc <- complete2("specdata", c(6, 10, 20, 34, 100, 200, 310))
complete2 <- function(directory, id = 1:332){
summsData <- function(x) {
data <- read.csv(paste(directory, "/",
formatC(x, width = 3, flag = "0"),
".csv", sep = ""))
sum(complete.cases(data))
}
nobs <- sapply(id, summsData)
return(data.frame(id, nobs))
}
cc <- complete2("specdata", c(6, 10, 20, 34, 100, 200, 310))
cc$nobs
cc <- complete2("specdata", 54)
cc$nobs
set.seed(42)
cc <- complete2("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
pollutantmean2 <- function(directory, pollutant, id = 1:332) {
setwd(file.path(getwd(), directory)) ## setting the directory
total = 0                            ## the sum of all observed values of pollutant (either sulfate or nitrate)
observations = 0                     ## the total number of observed values of pollutant (either sulfate or nitrate)
#Looping thru the directory's files specified in the 'id' argument
for (i in id)
{
## Due to the format of the filename, i.e 001, 010  instead of 1, 10. I became aware that the following method works but not efficient,
## but at the time of the completion of this assignment, it was the only way I knew how to do it.
if (i <10) {
data <- read.csv(paste("0","0", as.character(i), ".csv", sep=""),  ## for example, if 'id' =7, we get 007.csv
header = T,
na.strings=c("NA","NaN", " "))
}
else if (i>=10 & i<100) {
data <- read.csv(paste("0", as.character(i), ".csv", sep=""),  ## for example, if 'id' = 17, we get 017.csv
header = T,
na.strings=c("NA","NaN", " ")
)
}
else       {
data <- read.csv(paste(as.character(i), ".csv", sep=""),     ## Normal
header = T,
na.strings=c("NA","NaN", " ")
)
}
## getting rid of all the "NA" values and, consequently, all the non-complete ovservations (the ones with at least one NA in row)
data = na.omit(data)
##  cumulative addition of the complete observations
observations = observations + nrow(data)
## depending the poluttant ( sulfate or nitrate), we aggregate the observed values
if (pollutant == "sulfate") {total = total + sum(data$sulfate)}
else {total = total + sum(data$nitrate)}
}
## reset directory path
setwd("..")
## returning the mean of the pollutant values
return (total/observations)
}
pollutantmean2("specdata", "nitrate")
source('~/R Workin Directory/Program Assignment 1.R')
clr
clean
clear()
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, function)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapple(flags, unique)
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data("iris")
data(iris)
?iris
vapply(iris$Sepal.Length, iris$Species, summary)
tapply(iris$Sepal.Length, iris$Species, summary)
class(apply(iris[, 1:4], 1, mean))
apply(iris[, 1:4], 1, mean)
aply(iris, 2, mean())
aply(iris, 2, mean
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
v <- apply(iris[, 1:4], 2, mean)
class(v)
v <- colMeans(iris)
v <- rowMeans(iris[, 1:4])
class(v)
apply(iris, 1, mean)
?apply
data(mtcars)
?mtcars
data("mtcars")
tapply(mtcars$mpg, mtcars$cyl, mean)
apply(mtcars, 2, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
split(mtcars, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
sapply(mtcars, cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
lapply(mtcars, mean)
debug(ls)
Q
Q
?solve
?datasets
library(datasets)
datasets(iris)
iris
testing <- as.matrix(iris)
View(testing)
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function (y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setInverse <- function (inv) inverse <- inv
getInverse <- function () inverse
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$getInverse()
if(!is.null(inverse)){
message("getting cached matrix")
return(inverse)
}
d <- x$get()
inverse <- solve(d)
x$setInverse(inverse)
inverse
}
makeCacheMatrix(testing)
cacheSolve(testing)
class(testing)
View(testing)
testing <- as.matrix(iris[1:3, 1:3])
testing
cacheSolve(testing)
testSolved <- solve(testing)
View(testSolved)
makeCacheMatrix(testing)
cacheSolve(testing)
cacheSolve(makeCacheMatrix(testin))
cacheSolve(makeCacheMatrix(testing))
source('~/R Workin Directory/ProgrammingAssignment2/cachematrix.R')
install.packages("RMySQL", type = "source")
library(RMySQL)
ucscDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb, "show databases;"); dbDisconnect(ucscDb);
result
hg19 <- dbConnect(MySQL(), user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created <- h5createFile("example.h5")
library(httr)
html <- GET("https://api.github.com/users/jtleek/repos")
clientId <- "18dbd81bdc39aaa9e4f4"
clientSecret <- "2c6e82b11811b28a5995561f150ba9b801fe12b5"
oauth_endpoints("github")
myapp <- oauth_app("github", key = clientId, secret = clientSecret)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET(url, gtoken)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
req
View(req)
View(req)
stop_for_status(req)
content(req)
contentReq <- content(req)
parsedHTML <- htmlParse(contentReq, asText = TRUE)
library(XML)
parsedHTML <- htmlParse(contentReq, asText = TRUE)
xpathSApply(parsedHTML, "created", xmlValue)
parsedHTML
install.packages("sqldf")
getw
getwd()
setwd("C:/Users/Administradorcito/Documents/R Workin Directory/Getting and Cleaning Data")
read.csv("acsData.csv", header = TRUE, sep = ",")
acs <- read.csv("acsData.csv", header = TRUE, sep = ",")
sqldf("select pwgtp1 from acs where AGEP < 50")
sqldf::sqldf("select pwgtp1 from acs where AGEP < 50")
conn <- url("select pwgtp1 from acs where AGEP < 50")
conn <- url("http://biostat.jhsph.edu/~jleek/contact.html")
data <- GET("http://biostat.jhsph.edu/~jleek/contact.html")
html <- htmlTreeParse("http://biostat.jhsph.edu/~jleek/contact.html", useInternalNodes = TRUE)
contentData <- contentData
contentData <- content(data, as = "text")
parsedHTML <- htmlParse(contentData, asText = TRUE)
parsedHTML
class(parsedHTML)
class(contentData)
nchar(contentData[c(10, 20, 30, 100)])
nchar(contentData)
nchar(contentData[10])
nchar(parsedHTML[c(10, 20, 30, 100)])
nchar(html[10])
contentData[10]
contentData
html <- GET("http://biostat.jhsph.edu/~jleek/contact.html")
con <- url("http://biostat.jhsph.edu/~jleek/contact.html")
lines <- readLines(con)
nchar(lines[c(10, 20, 30, 100)])
read.fortran("8110.for")
read.fortran("8110.for", format = "F6.2")
read.fortran("8110.for", format = "F6.2", as.is = TRUE)
read.fortran("8110.for", format = "F9.2", as.is = TRUE)
read.fortran("8110.for", format = "A9.2", as.is = TRUE)
read.fortran("8110.for", format = "A9", as.is = TRUE)
forFile <- read.fortran("8110.for", format = "A9", as.is = TRUE)
forFile <- read.fortran("8110.for", format = "A4", as.is = TRUE)
head(forFile)
forFile <- read.fortran("8110.for", format = "D4", as.is = TRUE)
head(forFile)
forFile <- read.fortran("8110.for", format = "F4", as.is = TRUE)
forFile <- read.fortran("8110.for", format = "I4", as.is = TRUE)
forFile <- read.fortran("8110.for", format = "A5", as.is = TRUE)
head(forFile)
forFile <- read.fortran("8110.for", format = "A9", as.is = TRUE)
head(forFile)
forFile <- read.fortran("8110.for", format = "A01", as.is = TRUE)
forFile <- read.fortran("8110.for", format = "A10", as.is = TRUE)
head(forfile)
head(forFile)
forFile <- read.fortran("8110.for", format = "X4A1", as.is = TRUE)
head(forFile)
forFile <- read.fortran("8110.for", format = "X4", as.is = TRUE)
forFile <- read.fortran("8110.for", format = c("3X", "A4"), as.is = TRUE)
head(forFile)
forFile <- read.fortran("8110.for", format = c("4X", "A1"))
head(forFile)
sum(as.numeric(forFile),na.rm = TRUE)
sum(forFile,na.rm = TRUE)
rm()
as.data.frame.numeric(forFile)
head(forFile, n = 20)
forFile <- read.fortran("8110.for", format = c("4X", "A1"))
nums <- sapply(forfile, is.numeric)
nums <- sapply(forFile, is.numeric)
sum(forFile[,nums])
sum(forFile[nums,])
forFile <- read.fortran("8110.for", format = c("A100"))
head(forFile, n = 50)
head(forFile, n = 100)
forFile <- read.fortran("8110.for", format = c("A1000"))
head(forFile, n = 10)
q5_df <- read.fwf(file = "./data/q5_data.for", widths = c(15, 4, 1, 3, 5, 4), header = FALSE, sep = "\t", skip = 4)
q5_df <- read.fwf(file = "8110.for", widths = c(15, 4, 1, 3, 5, 4), header = FALSE, sep = "\t", skip = 4)
head(q5_df)
sum(q5_df$V6)
